{"version":3,"sources":["Recipe.js","App.js","reportWebVitals.js","index.js","recipe.module.css"],"names":["Recipe","title","calories","image","ingredients","className","styles","recipe","map","ingredient","text","src","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","a","getRecipes","fetch","response","json","data","hits","console","log","onSubmit","e","preventDefault","type","value","onChange","target","label","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"mQAkBeA,EAfA,SAAC,GAA2C,IAA1CC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,SAAUC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,YACrC,OACI,sBAAKC,UAAWC,IAAOC,OAAvB,UACI,6BAAKN,IACL,6BACKG,EAAYI,KAAI,SAAAC,GAAU,OACvB,6BAAKA,EAAWC,YAGxB,2CAAcR,KACd,qBAAKG,UAAWC,IAAOH,MAAOQ,IAAKR,QCgDhCS,G,MAxDH,WAEV,IAFgB,EAKcC,mBAAS,IALvB,mBAKTC,EALS,KAKAC,EALA,OAMYF,mBAAS,IANrB,mBAMTG,EANS,KAMDC,EANC,OAOUJ,mBAAS,WAPnB,mBAOTK,EAPS,KAOFC,EAPE,KAShBC,oBAAS,sBAAE,sBAAAC,EAAA,sDACTC,IADS,2CAER,CAACJ,IAEJ,IAAMI,EAAU,uCAAG,8BAAAD,EAAA,sEACME,MAAM,mCAAD,OAAoCL,EAApC,mBAZf,WAYe,oBAXd,qCAUG,cACXM,EADW,gBAEEA,EAASC,OAFX,OAEXC,EAFW,OAGjBX,EAAWW,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MAJA,2CAAH,qDAiBhB,OACE,sBAAKtB,UAAU,MAAf,UACE,uBAAMyB,SARQ,SAAAC,GAChBA,EAAEC,iBACFb,EAASH,GACTC,EAAU,KAKmBZ,UAAU,cAArC,UACE,uBACEA,UAAU,aACV4B,KAAK,OACLC,MAAOlB,EACPmB,SAjBa,SAAAJ,GACnBd,EAAUc,EAAEK,OAAOF,UAkBf,wBAAQ7B,UAAU,gBAAe4B,KAAK,SAAtC,uBAEF,qBAAK5B,UAAU,UAAf,SACGS,EAAQN,KAAI,SAAAD,GAAM,OACjB,cAAC,EAAD,CAEEN,MAAOM,EAAOA,OAAO8B,MACrBnC,SAAUK,EAAOA,OAAOL,SACxBC,MAAOI,EAAOA,OAAOJ,MACrBC,YAAaG,EAAOA,OAAOH,aAJtBG,EAAOA,OAAO8B,iBCrChBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,yB","file":"static/js/main.53defe38.chunk.js","sourcesContent":["import React from 'react';\nimport styles from './recipe.module.css';\n\nconst Recipe = ({title, calories, image, ingredients}) => {\n    return (\n        <div className={styles.recipe}>\n            <h1>{title}</h1>\n            <ol>\n                {ingredients.map(ingredient => (\n                    <li>{ingredient.text}</li>\n                ))}\n            </ol>\n            <p>Calories: {calories}</p>\n            <img className={styles.image} src={image}/>\n        </div>\n    );\n}\n\nexport default Recipe;","import React, {useEffect, useState} from \"react\";\nimport Recipe from './Recipe';\nimport './App.css';\n\n\nconst App = () => {\n\n  const APP_ID = '69e86c5e';\n  const APP_KEY = '1d7c3af8371ee1bd59b3959958b7aa6f';\n\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState(\"chicken\");\n\n  useEffect( async () => {\n    getRecipes();\n  }, [query]);\n\n  const getRecipes = async () => {\n    const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n    const data = await response.json();\n    setRecipes(data.hits);\n    console.log(data.hits);\n  };\n\n  const updateSearch = e => {\n    setSearch(e.target.value);\n  };\n\n  const getSearch = e => {\n    e.preventDefault(); \n    setQuery(search);\n    setSearch('');\n  };\n\n  return (\n    <div className=\"App\">\n      <form onSubmit={getSearch} className=\"search-form\">\n        <input \n          className=\"search-bar\" \n          type=\"text\" \n          value={search} \n          onChange={updateSearch}\n        />\n        <button className=\"search-button\"type=\"submit\">Search</button>\n      </form>\n      <div className=\"recipes\">\n        {recipes.map(recipe => (\n          <Recipe \n            key={recipe.recipe.label}\n            title={recipe.recipe.label}\n            calories={recipe.recipe.calories}\n            image={recipe.recipe.image}\n            ingredients={recipe.recipe.ingredients}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__BdaUe\",\"image\":\"recipe_image__BtdIE\"};"],"sourceRoot":""}